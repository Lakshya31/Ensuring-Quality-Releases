{
	"info": {
		"_postman_id": "144d1a42-58fc-489d-9200-18dd78c9c27e",
		"name": "Data Validation Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21777944"
	},
	"item": [
		{
			"name": "GET All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Structure Verification of posts\", function () {\r",
							"    // Get Response\r",
							"    jsonData = pm.response.json()\r",
							"    // Create a random index\r",
							"    randomIndex = Math.floor(Math.random()*jsonData.length)\r",
							"    //Tests\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"userId\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"title\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"body\");\r",
							"\r",
							"    // set post_id variable to that index's id\r",
							"    pm.globals.set(\"post_id\", jsonData[randomIndex][\"id\"]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Structure Verification of post\", function () {\r",
							"    // Get Response\r",
							"    jsonData = pm.response.json();\r",
							"    //Tests\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"userId\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"title\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"body\");\r",
							"    // Feed Data received as variables\r",
							"    pm.globals.set(\"userId\", jsonData[\"userId\"]);\r",
							"    pm.globals.set(\"title\", jsonData[\"title\"]);\r",
							"    pm.globals.set(\"body\", jsonData[\"body\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/posts/{{post_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"{{post_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get Response\r",
							"jsonData = pm.response.json()\r",
							"// Create a random index\r",
							"randomIndex = Math.floor(Math.random()*jsonData.length)\r",
							"// Tests\r",
							"\r",
							"pm.test(\"Structure Verification of comments\", function () {\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"postId\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"name\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"email\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"body\");\r",
							"})\r",
							"\r",
							"pm.test(\"Test to verify correct post ID\", function () {\r",
							"    pm.expect(jsonData[randomIndex].postId).to.eql(pm.globals.get(\"post_id\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/posts/{{post_id}}/comments",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"{{post_id}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get Response\r",
							"jsonData = pm.response.json()\r",
							"// Create a random index\r",
							"randomIndex = Math.floor(Math.random()*jsonData.length)\r",
							"// Tests\r",
							"\r",
							"pm.test(\"Structure Verification of comments\", function () {\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"postId\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"name\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"email\");\r",
							"    pm.expect(Object.keys(jsonData[randomIndex])).to.include(\"body\");\r",
							"})\r",
							"\r",
							"pm.test(\"Test to verify correct post ID\", function () {\r",
							"    pm.expect(jsonData[randomIndex].postId).to.eql(pm.globals.get(\"post_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/comments?postId={{post_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{post_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Structure Verification of post\", function () {\r",
							"    // Get Response\r",
							"    jsonData = pm.response.json();\r",
							"    //Tests\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"userId\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"title\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"body\");\r",
							"})\r",
							"\r",
							"pm.test(\"Test to verify correct data\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"Lakshya\");\r",
							"    pm.expect(jsonData.body).to.eql(\"Sharma\");\r",
							"    pm.expect(jsonData.userId).to.eql(1);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Lakshya\",\r\n    \"body\": \"Sharma\",\r\n    \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/posts",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Structure Verification of post\", function () {\r",
							"    // Get Response\r",
							"    jsonData = pm.response.json();\r",
							"    //Tests\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"userId\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"title\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"body\");\r",
							"})\r",
							"\r",
							"pm.test(\"Test to verify correct data\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"Lakshya\");\r",
							"    pm.expect(jsonData.body).to.eql(\"Sharma\");\r",
							"    pm.expect(jsonData.userId).to.eql(1);\r",
							"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"post_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Lakshya\",\r\n    \"body\": \"Sharma\",\r\n    \"userId\": 1,\r\n    \"id\": {{post_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/posts/{{post_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"{{post_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Structure Verification of post\", function () {\r",
							"    // Get Response\r",
							"    jsonData = pm.response.json();\r",
							"    //Tests\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"userId\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"id\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"title\");\r",
							"    pm.expect(Object.keys(jsonData)).to.include(\"body\");\r",
							"})\r",
							"\r",
							"pm.test(\"Test to verify correct data\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"Lakshya\");\r",
							"    pm.expect(jsonData.body).to.eql(pm.globals.get(\"body\"));\r",
							"    pm.expect(jsonData.userId).to.eql(pm.globals.get(\"userId\"));\r",
							"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"post_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Lakshya\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/posts/{{post_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"{{post_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response to be an empty object\", function () {\r",
							"    // Get Response\r",
							"    jsonData = pm.response.json();\r",
							"    //Tests\r",
							"    pm.expect(jsonData).to.eql({});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/posts/{{post_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"posts",
						"{{post_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}